name: Build and Release State Tax Form Crawler
on:
  push:
    branches:
      - "master"
      - "staging"
      - "development"
    paths:
      - "state-tax/state-tax-form-crawler/src/**"
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  LAMBDA_NAME: state-tax-form-crawler
  SESSION_NAME: GithubActionAssumeRole
  WORKING_DIR: state-tax/state-tax-form-crawler/src
  ROLE_ARN: arn:aws:iam::654654273398:role/GithubAction
  AWS_REGION: us-west-2
  DEV_ACCOUNT: 654654273398
  STAGING_ACCOUNT: 654654273398
  PROD_ACCOUNT: 654654273398

jobs:
  set-deploy-env:
    runs-on: ubuntu-latest
    outputs:
      account: ${{ steps.set-account.outputs.account }}
    steps:
      - name: Set AWS account id by branch (ref_name)
        id: set-account
        run: |
          if ${{ github.ref_name == 'development' }}; then
            echo "account=${{ env.DEV_ACCOUNT }}" >> $GITHUB_OUTPUT
          elif ${{ github.ref_name == 'staging' }}; then
            echo "account=${{ env.STAGING_ACCOUNT }}" >> $GITHUB_OUTPUT
          elif ${{ github.ref_name == 'master' }}; then
            echo "account=${{ env.PROD_ACCOUNT }}" >> $GITHUB_OUTPUT
          else
            echo "stop_workflow=true" >> $GITHUB_OUTPUT
          fi
      - name: Debug variables
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.event_name: ${{ github.event_name }}"
      - name: Check stop_workflow
        run: |
          if ${{ steps.set-account.outputs.stop_workflow == 'true'}}; then
            echo "Stopping workflow because branch "${{ github.ref_name }}" is not supported to be deployed."
            exit 1
          fi
  build-and-upload:
    needs: set-deploy-env
    runs-on: ubuntu-latest
    ## JWT Permissions required by GH
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Use Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: pip install -r requirements.txt -t ../lib --upgrade
      - name: Package lambda function
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          cp -r . ../lib
          cd ../lib
          zip -r ../function.zip .
          ls -al ../function.zip  # Verify the zip file creation
          cd .. && rm -rf lib
      - name: Check AWS identity
        run: |
          aws sts get-caller-identity
      - name: Upload lambda to AWS (DEV)
        working-directory: ${{ env.WORKING_DIR }}
        env:
          FUNCTION_NAME: arn:aws:lambda:us-west-2:${{ needs.set-deploy-env.outputs.account }}:function:${{ env.LAMBDA_NAME }}
        run: |
          aws lambda update-function-code --function-name $FUNCTION_NAME --zip-file fileb://../function.zip
